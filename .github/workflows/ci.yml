name: ci

on: [push, pull_request]

jobs:
  cpoptions_checker:
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Check cpoptions
      run: test/autoload_should_check_cpo.sh

  vint:
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Run vint with reviewdog
      uses: reviewdog/action-vint@v1.0.1
      with:
        github_token: ${{ secrets.github_token }}
        reporter: github-pr-review

  crates:
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Run tests under crates
      run: bash ci/run_test.sh

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  maple_binary:
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Build maple
      run: cargo build --release

  python_dynamic_module:
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Run Cargo test
      run: |
        cd pythonx/clap/fuzzymatch-rs
        cargo test --no-default-features
    - name: Install Rustfmt
      run: rustup component add rustfmt
    - name: Check formatting
      run: cargo fmt --all -- --check
