*clap.txt* Modern Generic Interactive Finder and Dispatcher
*clap* *vim-clap*
                                                               ~
                _                      __                      ~
         _   __(_)___ ___        _____/ /___ _____             ~
        | | / / / __ `__ \______/ ___/ / __ `/ __ \            ~
        | |/ / / / / / / /_____/ /__/ / /_/ / /_/ /            ~
        |___/_/_/ /_/ /_/      \___/_/\__,_/ .___/             ~
                                          /_/                  ~


===============================================================================
CONTENTS                                                         *clap-contents*

  1. Introduction.........................|clap-introduction|
  2. Features.............................|clap-features|
  3. Supported Providers & Tools..........|clap-support|
  4. Provider.............................|clap-provider|
    4.1 Non-pure-async Providers..........|clap-non-pure-async-providers|
    4.2 Pure async Providers..............|clap-pure-async-providers|
    4.3 Registering Providers.............|clap-registering-providers|
  5. Global Options.......................|clap-options|
    5.1 Highlights........................|clap-highlights|
  6. Provider Options.....................|clap-provider-options|
    6.1 Options for grep..................|clap-grep-options|
    6.2 Options for yanks.................|clap-yanks-options|
    6.3 Other Provider Options............|clap-other-provider-options|
  7. Commands.............................|clap-commands|
  8. Keybindings..........................|clap-keybindings|
  9. API..................................|clap-api|
  10. Contact.............................|clap-contact|


===============================================================================
1. Introduction                                              *clap-introduction*


Vim-clap is a modern generic interactive finder and dispatcher, based on the
newly feature: `floating_win` of neovim or `popup` of vim. The goal of vim-clap is
to work everywhere out of the box, with fast response.


===============================================================================
2. Features                                                      *clap-features*


- Pure vimscript.
- Work out of the box, without any extra dependency.
- Extensible, easy to add new source providers.
- Find or dispatch anything on the fly, with smart cache strategy.
- Untouch your current window layout, less eye movement.
- Support multi-selection, use vim's regexp as filter by default.
- Support the preview functionality when navigating the result list.
- Support builtin match and external fuzzy filter tools.


===============================================================================
3. Supported Providers & Tools                                    *clap-support*


                                                    *:Clap-bcommits*
:Clap bcommits           List git commits for the current buffer.
                         Require `git`


                                                    *:Clap-blines*
:Clap blines             List Lines in the current buffer.


                                                    *:Clap-buffers*
:Clap buffers            List open buffers.


                                                    *:Clap-colors*
:Clap colors             List Colorschemes.
                         Support preview.


                                                    *:Clap-command*
:Clap command            List Command.


                                                    *:Clap-hist:*
                                                    *:Clap-command_history*
:Clap hist:              List Command history.
:Clap command_history


                                                    *:Clap-commits*
:Clap commits            List Git commits.
                         Require `git`

                                                    *:Clap-files*
:Clap files              List Files.
                         Require `fd`/`rg`/`git`/`find`

                         The order of default finder executable used
                         for files is [ `fd`, `rg`, `git`, `find` ] .

                         Use `++finder` to specify another finder
                         executable for the files and pass the options
                         after, e.g., `:Clap files ++finder=rg --files` means
                         the actual command line used is `rg --files` .

                         If you have `fd` installed, `:Clap files` is equivalent to
                         `:Clap files ++finder=fd --type f` .

                         For the `fd` and `rg` finder, you can pass
                         `--hidden` to search the hidden files as well, i.e,
                         `:Clap files --hidden` .

                         The last argument can be a directory, i.e.,
                         `Clap files [DIR]` to search files under a
                         specific directory. By default clap will try to use
                         the git base directory or `getcwd()` . For example,
                         use `Clap files ..` to search files under the parent directory.


                                                     *:Clap-filetypes*
:Clap filetypes          List File types.


                                                     *:Clap-gfiles*
                                                     *:Clap-git_files*
:Clap gfiles             List Files managed by git.
:Clap git_files          Require `git`


                                                     *:Clap-git_diff_files*
:Clap git_diff_files     List Files managed by git and having uncommitted changes.
                         Require `git`

                                                     *:Clap-grep*
:Clap grep               Grep on the fly.
                         Require `rg`

                         Use `Clap grep ++query=<cword>` to grep
                         the word under cursor.

                         Use `Clap grep ++opt=[OPTION]` to pass extra options
                         from the command line which will be put after
                         `g:clap_provider_grep_opts`, e.g.,
                         `Clap grep ++opt=--no-ignore ++opt=--hidden` .

                         The last argument can be a directory, i.e.,
                         `Clap grep [DIR]` to start the grep job under a
                         specific directory. By default clap will try to use
                         the git base directory or `getcwd()` . For example,
                         use `Clap grep ..` to grep from the parent directory.


                                                      *:Clap-history*
:Clap history            List the open buffers and |v:oldfiles|.


                                                     *:Clap-jumps*
:Clap jumps              List Jumps
                         Support preview


                                                     *:Clap-lines*
:Clap lines              List the lines of the loaded buffers.

                                                     *:Clap-quickfix*
:Clap quickfix           List the entries of the quickfix list.

                                                     *:Clap-marks*
:Clap marks              List Marks
                         Support preview


                                                     *:Clap-registers*
:Clap registers          List Registers


                                                     *:Clap-tags*
:Clap tags               List Tags in the current buffer
                         Require `vista.vim`


                                                     *:Clap-windows*
:Clap windows            List Windows


[fd]: https://github.com/sharkdp/fd
[rg]: https://github.com/BurntSushi/ripgrep
[git]: https://github.com/git/git
[vista.vim]: https://github.com/liuchengxu/vista.vim


===============================================================================
4. Clap Provider                                                  *clap-provider*


The provider of vim-clap is actually a |Dict| that specifies the action of your
move in the input window. The idea is simple, every time you typed something,
the `source` will be filtered or a job `source_async` will be spawned, and then
the result retrived later will be shown in the dispaly window.

There are generally two kinds of providers in vim-clap.

1. Non-pure-async provider: suitable for these which are able to collect all
   the items in a short time, e.g., open buffers, command history. It will run
   in synchoronous if the source size is not large.

   But it's also able to deal with the list that is potentially huge, let's say
   100,000+ lines/items, in which case vim-clap will try to run the external filter
   asynchronously. In a word, vim-clap can always be fast responsive.

   What's more, it's extremely easy to introduce a new non-pure-async clap provider
   as vim-clap provides the default implementation of `on_typed` and `source_async`.

2. Pure async provider: suitable for the time-consuming jobs, e.g.,
   grep a word in a directory.


-------------------------------------------------------------------------------
4.1. Non-pure-async Providers                     *clap-non-pure-async-providers*


  `sink`                 |String|  - vim command to handle the selected entry.
                       |Funcref| - reference to function to process the selected entry.

                       This field is mandatory.


  `sink*`                |Funcref| - similar to `sink*`, but takes the list of multiple
                                 selected entries as input.

                       This field is optional.


  `source`               |List|    - vim List as input to vim-clap.
                       |String|  - external command to generate input to vim-clap,
                                 e.g. `find .` .
                       |Funcref| - reference to function that returns a List to
                                 generate input to vim-clap.

                       This field is mandatory.


  `source_async`         |String| - job command to filter the items of `source` based
                                on the external tools. The default implementation
                                is to feed the output of `source` into the external
                                fuzzy filters and then display the filtered result,
                                which could have some limitations, e.g., the
                                matched indices is unable to be highlighted.

                       This field is optional.


  `filter`               |Funcref| - given what you have typed, use `filter(entry)` to
                                 evaluate each entry in the display window, when
                                 the result is zero remove the item from the current
                                 result list. The default implementation is to
                                 match the input using vim's regex.

                       This field is mandatory.


  `on_typed`             |Funcref| - reference to function to filter the `source`.

                       This field is mandatory.


  `on_move`              |Funcref| - can be used for the preview purpose, when navigating
                                 the result list, see clap/provider/colors.vim.

                                 It won't be called if you merely input some characters
                                 and do not scroll the list.

                       This field is optional.


  `on_enter`             |Funcref| - when entering the clap window, can be used
                                 for recording the current state.

                       This field is optional.


  `on_exit`              |Funcref| - can be used for restoring the state on start.

                       This field is optional.


  `enable_rooter`        |Bool|

                       This field is optional.


  `support_open_action`  |Bool|

                       This field is optional.


-------------------------------------------------------------------------------
4.2 Pure async Providers                              *clap-pure-async-providers*


  `sink`                   |Funcref| - reference to function to process the selected
                                   entry.

                         This field is mandatory and has no default
                         implementation.


  `on_typed`               |Funcref| - reference to function to spawn an async job.

                         This field is mandatory.


  `on_move`                |Funcref|

                         This field is optional.


  `on_enter`               |Funcref|

                         This field is optional.


  `on_exit`                |Funcref|

                         This field is optional.


  `converter`              |Funcref| - reference to function to convert the raw output
                                   of job to another form, e.g., prepend an icon
                                   to the grep result.

                         This field is optional.


  `jobstop`                |Funcref| - Stop the current job.

                         This field is mandatory.


  `enable_rooter`          |Bool|

                         This field is optional.


  `support_open_action`    |Bool|

                         This field is optional.


-------------------------------------------------------------------------------
4.3 Registering Providers                            *clap-registering-providers*


Vim-clap will load the providers automatically when neccessary if it's defined
properly.

- vimrc

Define `g:clap_provider_{provider_id}` in your vimrc, e.g.,

>
  " `:Clap quick_open` to open some dotfiles quickly.
  let g:clap_provider_quick_open = {
      \ 'source': ['~/.vimrc', '~/.spacevim', '~/.bashrc', '~/.tmux.conf'],
      \ 'sink': 'e',
      \ }
<

- autoload

`g:clap#provider#{provider_id}#`. See `:h autoload` and autoload/clap/provider.vim.

                                                    *clap-provider-description*

Each autoload provider should start with these two comment lines, the
Description line will be extracted as the brief introduction when displaying
all the avaliable providers via `:Clap` .
>
  " Author: liuchengxu <xuliuchengxlc@gmail.com>
  " Description: List the windows.


===============================================================================
5. Global Options                                                 *clap-options*


g:clap_provider_alias                                    *g:clap_provider_alias*

  Type: |Dict|
  Default: `{ 'hist:': 'command_history', 'gfiles': 'git_files' }`

  Add an alias for the provider if you don't want to invoke some clap provider
  using its origin id(name) in that it's too long or somehow. That is to say,
  `:Clap command_history` is equivalenta to `:Clap hist:` .

  The `key` of |g:clap_provider_alias| is the alias, the `value` is the origin
  provider name.


g:clap_popup_input_delay                              *g:clap_popup_input_delay*

  Type: |Number|
  Default: `200`

  This variable controls the milliseconds delay after which the `on_typed` of
  provider will be run after your input is changed.

  This option is only meaningful for Vim, NeoVim does not have this delay.


g:clap_maple_delay                                          *g:clap_maple_delay*

  Type: |Number|
  Default: `100`

  This variable controls the milliseconds delay after which `maple` will be
  run in case of you have 1 million items.


g:clap_popup_cursor_shape                            *g:clap_popup_cursor_shape*

  Type: |String|
  Default: `'|'`

  This variable controls the mocked cursor shape in the popup window of vim.


g:clap_on_move_delay                                      *g:clap_on_move_delay*

  Type: |Number|
  Default: `300`

  This variable controls the milliseconds delay after which the `on_move` of
  provider will be run when you navigate the result list.


g:clap_forerunner_status_sign_done          *g:clap_forerunner_status_sign_done*

  Type: |String|
  Default: `'*'`

  The async forerunner job is done in this vim-clap session. Everything should
  be fast and deterministic even you have 1 million items as long as you
  install the `maple` Rust extension.


g:clap_forerunner_status_sign_running     *g:clap_forerunner_status_sign_running*

  Type: `String`
  Default: `'!'`

  The async forerunner job is still running.


g:clap_disable_optional_async                    *g:clap_disable_optional_async*

  Type: |Bool|
  Default: `v:false`

  For the non-pure-async providers, vim-clap provides an optional async way to
  filter/find the candidates and will enable it automatically in these cases:

  - the default `source_async` implementation is doable
  - `g:clap.context.async` is v:true
  - the `source` of provider is |String|
  - the `source` of provider is |List| and the size of source exceeds the
    threshold
  - the `source` of provider is a |Funcref| that returns a |String| or
    returns a |List| that exceeds the threshold.

  If the provider does not provide the `source_async` implementation explictily
  and vim-clap fails to inject the default async external filter implementation,
  this variable has no effect, the sync filter implementation will always be
  used.


g:clap_no_matches_msg                                    *g:clap_no_matches_msg*

  Type: |String|
  Default: `"NO MATCHES FOUND"`

  This message will be used when there is no matches found.


g:clap_dispatcher_drop_cache                      *g:clap_dispatcher_drop_cache*

  Type: |Bool|
  Default: `v:true`

  Normally when the external async job returns thousands of results, we won't
  view them all. By default only the first N items will be actually remembered
  and the others will only be counted.

  Set this variable to `v:true` to save all the results, and then when you
  reach the end of the display window, the cached results will be loaded
  automatically. However, it may have some performance loss to cache all the
  results especially when there are hundreds of thousands of results.


g:clap_disable_run_rooter                           *g:clap_disable_run_rooter*

  Type: |Bool|
  Default: `v:false`

  By default vim-clap will try to run the provider from the project root
  by changing `cwd` temporarily if the provider has `enable_rooter` field and
  its value is |v:true|.

  The project root here means the git base directory. Create an issue if
  you want to see more support about the project root.

  This variable can be set to `v:true` to run from the origin `cwd`.


g:clap_current_selection_sign                   *g:clap_current_selection_sign*

  Type: |Dict|
  Default: `{ 'text': '>>', 'texthl': "WarningMsg", "linehl": "ClapCurrentSelection" }`


g:clap_selected_sign                                     *g:clap_selected_sign*

  Type: |Dict|
  Default: `{ 'text': ' >', 'texthl': "WarningMsg", "linehl": "ClapSelected" }`


g:clap_open_action                                         *g:clap_open_action*

  Type: |Dict|
  Default: `{ 'ctrl-t': 'tab split', 'ctrl-x': 'split', 'ctrl-v': 'vsplit' }`

  This variable defines the extra key bindings for opening the selected file
  in a different way.

  NOTE: do not define a key binding which is conflicted with the other
  default bindings of vim-clap, and only `ctrl-*` is supported for now.


g:clap_search_box_border_symbols              *g:clap_search_box_border_symbols*

  Type: |Dict|
  Default: ` { 'arrow': ["\ue0b2", "\ue0b0"], 'curve': ["\ue0b6", "\ue0b4"], 'nil': ['', ''] }`

  This variable defines the symbols that could be used for customizing the
  search box border. See |g:clap_search_box_border_style| .

  These two symbols must be symmetrically equal. Not every font and terminal
  emulator can render these symbols perfectly. Use it at your own risk.


g:clap_search_box_border_style                  *g:clap_search_box_border_style*

  Type: |Dict|
  Default: `exists('g:spacevim_nerd_fonts') || exists('g:airline_powerline_fonts') ? 'curve' : 'nil')`

  This variable controls the style of border symbol used for the search box
  window.

  Set this variable to `nil` to disable the search box border symbol.


g:clap_default_external_filter                  *g:clap_default_external_filter*

  Type: |String| or |v:null|
  Default: `'maple' | 'fzy' | 'fzf' | v:null`

  The default provider's async implementation is based on these external
  filter programs in the following order:

  `maple` - actually using the algorithm of skim, with the highlight of matched indices.
  `fzy` - no highlight of matched indices.
  `fzf` - no highlight of matched indices.


g:clap_prompt_format                             *g:clap_prompt_format*

  Type: |String|
  Default: `'%spinner% %provider_id%> '`

  This variable defines a message format for the prompt. The following
  sequences of characters will be replaced.

    `%spinner%`       - replaced with the current spinner symbol, see
                      |g:clap_spinner_frames|
    `%provider_id%`   - replaced with the id of current provider


g:clap_spinner_frames                            *g:clap_spinner_frames*

  Type: |List|
  Default: `['◐', '◑', '◒', '◓']`

  The frames used for drawing the spinner.

  Reference:
  https://github.com/sindresorhus/cli-spinners/blob/master/spinners.json


g:clap_enable_icon                               *g:clap_enable_icon*

  Type: |Number|
  Default: `exists('g:loaded_webdevicons') || get(g:, 'spacevim_nerd_fonts', 0)`

  When set to `1`, vim-clap will try to use the nerdfont icons during
  the rendering process. Set to `0` If your terminal-emulator or font can not
  render these icons properly.

  This variable is indended for all the providers by default. It has no effect
  if some clap provider already has its own icon flag, e.g., |g:clap_provider_grep_enable_icon| .


g:clap_fuzzy_match_hl_groups                      *g:clap_fuzzy_match_hl_groups*

  Type: |List|
  Default: >
          [
          \ [118 , '#87ff00'] ,
          \ [82  , '#5fff00'] ,
          \ [46  , '#00ff00'] ,
          \ [47  , '#00ff5f'] ,
          \ [48  , '#00ff87'] ,
          \ [49  , '#00ffaf'] ,
          \ [50  , '#00ffd7'] ,
          \ [51  , '#00ffff'] ,
          \ [87  , '#5fffff'] ,
          \ [123 , '#87ffff'] ,
          \ [159 , '#afffff'] ,
          \ [195 , '#d7ffff'] ,
          \ ]
<

  This vriable controls the highlight groups of the fuzzy matches chars. Each
  item of |g:clap_fuzzy_match_hl_groups| is `[ctermfg, guifg]` .


g:clap_builtin_fuzzy_filter_threshold     *g:clap_builtin_fuzzy_filter_threshold*

  Type: |Number|
  Default: `10000`(no Rust extension), `100000`(with Rust extension)

  Vim-clap will try to spawn a asynchronous job to get the total possible
  results on entering the main window, instead of dispatching with the
  user's input later, to get the total result number and use the built-in
  fuzzy filter which uses the fzy algorithm.

  The benefit of the built-in fzy filter is that no redraw that happens in the
  async job, that means no flicker on your every input. Its drawback is that
  the built-in filter is synchoronous that will block the UI if you have a
  monster of candidates.


-------------------------------------------------------------------------------
5.1. Highlights                                                *clap-highlights*


ClapInput                                                            *ClapInput*

  Default: `hi default link ClapInput Visual`

  The highlight for input window.


ClapDisplay                                                         *ClapDisplay*

  Default: `hi default link ClapDisplay Pmenu`

  The highlight for display window.


ClapPreview                                                         *ClapPreview*

  Default: `hi default link ClapPreview PmenuSel`

  The highlight for preview window.


ClapDefaultSelected                                          *ClapDefaultSelected*

  `hi ClapDefaultSelected cterm=bold,underline gui=bold,underline ctermfg=80 guifg=#5fd7d7`


ClapDefaultCurrentSelection                          *ClapDefaultCurrentSelection*

  `hi ClapDefaultCurrentSelection cterm=bold gui=bold ctermfg=224 guifg=#ffd7d7`


ClapSelected                                                       *ClapSelected*

  Default: `hi default link ClapSelected ClapDefaultSelected`

  The highlight for the sign of selected items via `<Tab>` by default.


ClapCurrentSelection                                        *ClapCurrentSelection*

  Default: `hi default link ClapCurrentSelection ClapCurrentSelection`

  The highlight for the sign of current selection.


ClapMatches                                                          *ClapMatches*

  Default: `hi default link ClapMatches Search`

  The highlight for the first matched part.


ClapMatches[1-8]                                                 *ClapMatches[1-8]*

  `ClapMatches[1-8]` will be used for the matched substrings in the substring mode.


ClapFuzzyMatches[1-12]                                     *ClapFuzzyMatches[1-12]*

  `ClapFuzzyMatches[1-12]` will be used for highlighting the fuzzy matched
  items.


ClapNoMatchesFound                                        *ClapNClapNoMatchesFound*

  Default: `hi default link ClapNClapNoMatchesFound ErrorMsg`

  The highlight for the no matches found message. See |g:clap_no_matches_msg|.


===============================================================================
6. Provider Options                                     *clap-provider-options*


The option naming convention for provider is `g:clap_provider_{provider_id}_{opt}`.


-------------------------------------------------------------------------------
6.1. Clap Grep Options                                      *clap-grep-options*

g:clap_provider_grep_executable                   *g:clap_provider_grep_executable*

  Type: |String|
  Default: `'rg'`

  The grep tool to be used. If you change it, you may need to adjust the
  g:clap_provider_grep_opts as well. Please make sure grep_tool has an output
  or a flag similar to the --vimgrep flag in ag/rg. Otherwise you may
  encounter issues.


g:clap_provider_grep_delay                         *g:clap_provider_grep_delay*

  Type: |Number|
  Default: `300`

  This variable controls the milliseconds delay after which the grep job
  will be spawned in the background.


g:clap_provider_grep_blink                         *g:clap_provider_grep_blink*

  Type: |List|
  Default: `[2, 100]`

  Blink the cursorline 2 times with 100ms timeout when jumping the result.

  Set it to `[0, 0]` to disable this blink.


g:clap_provider_grep_opts                          *g:clap_provider_grep_opts*

  Type: |String|
  Default: `'-H --no-heading --vimgrep --smart-case'`

  Set this to control the arguments that get passed to the grep tool.
  Setting `'-H --no-heading --vimgrep --smart-case --hidden -g "!.git/"'`
  for example would enable grepping hidden files and folders while respecting
  your `.gitignore` and not showing the `.git` directory itself.

  For the grep tools Ag & Rg make sure to pass the `--vimgrep` flag, otherwise
  the output cannot be interpreted. For other tools you may want check if a
  similar option exists.


g:clap_provider_grep_enable_icon              *g:clap_provider_grep_enable_icon*

  Type: |Number|
  Default: `exists('g:loaded_webdevicons') || get(g:, 'spacevim_nerd_fonts', 0)`

  Set this variable to `0` to disable drawing an icon for the returned result.


g:clap_provider_grep_cmd_format             *g:clap_provider_grep_cmd_format*

  Type: |String|
  Default: `'%s %s "%s"'.(has('win32') ? ' .' : '')`

  The format used to create the command. 3 strings will be passed to the
  format in that order:

  1. |g:clap_provider_grep_executable|
  2. |g:clap_provider_grep_opts|
  3. |g:clap.input.get()|, the query string that the user has entered to search

  In most cases this option does not have to be adjusted for tools like Ag &
  Rg. For other tools this may not be the case.


-------------------------------------------------------------------------------
6.2. Clap Yanks Options                                      *clap-yanks-options*


g:clap_enable_yanks_provider                       *g:clap_enable_yanks_provider*

  Type: |Number|
  Default: `1`

  The yanks provider is enabled by default.

  Set this variable to `0` to disable yanks provider.


g:clap_provider_yanks_max_entries             *g:clap_provider_yanks_max_entries*

  Type: |Number|
  Default: `20`

  Set this variable to limit maximum yanks entries.


g:clap_provider_yanks_min_len             *g:clap_provider_yanks_min_len*

  Type: |Number|
  Default: `1`

  Set minimum length of yanked text to be stored in yanks stack. Setting this
  variable to less than 2 has no effect.


-------------------------------------------------------------------------------
6.3 Other Provider Options                          *clap-other-provider-options*


===============================================================================
7. Commands                                                     *clap-commands*

  >
  :Clap[!] [provider_id_or_alias] [++opt] [+opt]
<

All the opts are accessible via `g:clap.context[opt]`.

The form of `[++opt]` is `++{optname}={value}`, where {optname} is one of:

  - `++externalfilter=fzf` or `++ef=fzf`.

`[+opt]` is used for the bool arguments:

 - `+async`

`Clap! [provider_id_or_alias]` is equal to `Clap [provider_id_or_alias] +async` .


===============================================================================
8. Movement/Keybindings                                       *clap-movement*
                                                              *clap-keybindings*


- Use `Ctrl-j`/`Down` or `Ctrl-k`/`Up` to navigate the result list up and down.

- Use `Ctrl-a`/`Home` to go to the start of the input.

- Use `Ctrl-e`/`End` to go to the end of the input.

- Use `Ctrl-c`, `Ctrl-g`, `Ctrl-[` or `Esc` to exit.

- Use `Ctrl-h`/`BS` to delete previous character.

- Use `Ctrl-d` to delete next character.

- Use `Ctrl-b` to move cursor left one character.

- Use `Ctrl-f` to move cursor right one character.

- Use `Enter` to select the entry and exit.

- Use `Tab` to select multiple entries and open them using the quickfix window.
  (Need the provider has `sink*` support)

- Use `Ctrl-t` or `Ctrl-x`, `Ctrl-v` to open the selected entry in a new tab
  or a new split.
  
- Use `Ctrl-u` to clear inputs.


===============================================================================
9. API                                                                *clap-api*


g:clap                                                               *g:clap*


g:clap.context                                               *g:clap.context*

  `g:clap.context` stores all the provider options passed via `++opt` or `+opt`.


g:clap.provider                                             *g:clap.provider*


g:clap.input                                                   *g:clap.input*

  `g:clap.input.goto_win()` - Go to input window with `noautocmd`.

  `g:clap.input.getbufvar({varname}[, {def}])` - Similar to |getbufvar()| with
  the buffer number is specified to the input buffer.

  `g:clap.input.setbufvar({varname}, {val})` - Similar to |setbufvar()| with
  the buffer number is specified to the input buffer.

  `g:clap.input.get()` - Get the current input.


g:clap.display                                               *g:clap.display*

  `g:clap.display.goto_win()` - Go to display window with `noautocmd`.

  `g:clap.display.get_lines()` - Get the current lines in display window.

  `g:clap.display.getbufvar({varname}[, {def}])` - Similar to |getbufvar()| with
  the buffer number is specified to the display buffer.

  `g:clap.display.setbufvar({varname}, {val})` - Similar to |setbufvar()| with
  the buffer number is specified to the display buffer.


ClapOnEnter                                             *ClapOnEnter-autocmd*
                                                                *ClapOnEnter*

  This |User| autocommand is triggered immediately after the provider's
  `on_enter` is run. You can use this autocommand to change the options of
  clap related buffers and windows.


ClapOnExit                                               *ClapOnExit-autocmd*
                                                                 *ClapOnExit*

  This |User| autocommand is triggered when you exit the clap windows.


===============================================================================
10. Contact                                                       *clap-contact*

If you like this plugin, and wish to get in touch, check out the GitHub
for more at https://github.com/liuchengxu/clap


===============================================================================
  vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl:
